
Харківський університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії



Звіт
з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Методи рефакторингу коду програмного забезпечення»


Виконала:
студентка групи ПЗПІ-23-5
Широченкова Т.В.
Перевірив:
Сокорчук І.П.

Харків 2025
1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень117.10.20250.1Створено розділи «Мета», «Хід роботи»,  «Приклади коду»218.10.20250.1Створено розділи  «Висновки»,  «Список використаних джерел», «Додаток А», «Додаток Б».














1 МЕТА
     Метою роботи є вивчення дисциплінованого процесу зміни внутрішньої структури програмного забезпечення, відомого як рефакторинг, без зміни його зовнішньої поведінки. Основна задача — покращення читабельності, підтримки та гнучкості коду, щоб зробити його більш зручним для подальшого розвитку. Також мета полягає у закріпленні знань щодо мінімізації "технічного боргу" та підготовки коду до нових функціональних змін.
2 ХІД РОБОТИ
1. Ознайомлення з поняттям рефакторингу. 
Розглянуто визначення рефакторингу як процесу зміни внутрішньої структури коду, що не впливає на його зовнішню поведінку. Визначено, що його головною метою є покращення якості програмного забезпечення.
2. Аналіз ключових принципів. 
Вивчено основний принцип: код повинен бути чистим для ефективності, а рефакторинг є постійною інвестицією в якість.
3. Вивчення класичних методів рефакторингу. 
Розглянуто методи для боротьби з "поганими запахами коду" (Code Smells):
a) Replace Method with Method Object (Заміна методу об'єктом методу): Перетворення великого методу на окремий клас для розбиття складної логіки на менші, керовані частини.
b) Replace Type Code with Class (Заміна коду типу класом): Заміна числових або рядкових кодів на спеціалізовані класи для покращення безпеки типів.
c) Remove Control Flag (Видалення керуючого прапора): Усунення логічних змінних, що керують потоком виконання, шляхом їх заміни на оператори break, return або continue.
4. Розгляд покрокового процесу рефакторингу. 
Визначено дисциплінований підхід для уникнення помилок:
a) Забезпечення коду надійними автоматизованими тестами.
b) Виявлення "антипатернів" та "запахів коду".
c) Внесення невеликих ітеративних змін з постійним запуском тестів.
d) Фіксація змін у системі контролю версій після успішного проходження тестів.
5. Ознайомлення з інструментами для рефакторингу.
Розглянуто сучасні IDE, що спрощують процес, такі як JetBrains IDE (IntelliJ IDEA), Visual Studio / VS Code та Eclipse, які надають автоматизовані та безпечні інструменти.
	
3 ПРИКЛАДИ КОДУ
1. Replace Method with Method Object
1 class Order {
2     double price() {
3         return new PriceCalculator(this).compute();
4     }
5 }
6 class PriceCalculator {
7     private final Order order;
8     PriceCalculator(Order order) { this.order = order; }
9     double compute() {
10        double basePrice = order.quantity * order.itemPrice;
11        double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
12        double shipping = Math.min(basePrice * 0.1, 100.0);
13        return basePrice - discount + shipping;
14    }
15}

2. Replace Type Code with Class
1 class Employee {
2     EmployeeType type;
3 }
4 class EmployeeType {
5     private final String name;
6     EmployeeType(String name) {
7         this.name = name; 
8     }
9     static final EmployeeType 
10        ENGINEER = new EmployeeType("Engineer");
11    static final EmployeeType 
12        MANAGER = new EmployeeType("Manager");
13    static final EmployeeType 
14        SALESMAN = new EmployeeType("Salesman");
15}

3. Remove Control Flag
for (User u : users) {  if (u.getName().equals(targetName)) {    return u; // Використовуємо return  }}return null; // Якщо не знайдено

ВИСНОВКИ
     У ході роботи було: розглянуто ключові методи та принципи рефакторингу коду, визначено, що рефакторинг є дисциплінованим процесом покращення внутрішньої структури коду без зміни його зовнішньої поведінки, встановлено важливість наявності надійних юніт-тестів як обов’язкової умови для безпечних змін, ознайомлено з класичними техніками для боротьби з "поганими запахами коду".
     Отже, рефакторинг — це не окремий етап, а постійна інвестиція в якість програмного забезпечення, що прискорює розробку нових функцій, знижує кількість помилок та робить код більш гнучким і легким у підтримці.
     
     
     
     
     
     
     
     
     
     
     
     
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
1. Fowler, Martin. Refactoring: Improving the Design of Existing Code. (дата звернення: 17.10.2025).
2. Martin, Robert C. Clean Code. (дата звернення: 17.10.2025).
3. Онлайн ресурси: Refactoring Guru, Sourcemaking. (дата звернення: 17.10.2025).
     
     
     
     
     
     

     
     
     
     
     
     
     
     
ДОДАТОК А
Відео-посилання на ютуб
https://youtu.be/okygaK_ed0k














ДОДАТОК Б
Скріншоти презентації

Рисунок Б.1 – Титульний лист

Рисунок Б.2 – Вступна частина

Рисунок Б.3 – Три методи рефакторингу

Рисунок Б.4 – Практичні приклади

Рисунок Б.5 – Практичні приклади

Рисунок Б.6 – Практичні приклади

Рисунок Б.7 – Практичні приклади

Рисунок Б.8 – Покроковий процес рефакторингу

Рисунок Б.9 – Інстументарій розробника

Рисунок Б.10 – Висновки

Рисунок Б.11 – Необхідність рефакторингу

Рисунок Б.12 – Використані джерела

