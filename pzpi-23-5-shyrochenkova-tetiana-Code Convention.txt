
Харківський університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії



Звіт
з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»


Виконала:
студентка групи ПЗПІ-23-5
Широченкова Т.В.
Перевірив:
Сокорчук І.П.

Харків 2025
1 МЕТА
     Метою роботи є вивчення основних правил і рекомендацій оформлення програмного коду мовою C++ для підвищення його якості, читабельності, підтримуваності та зниження кількості помилок. Також мета полягає у закріпленні знань щодо: організації структури коду та проекту, правил іменування змінних, функцій і класів, правильного використання коментарів і документації, застосування інструментів автоматичного форматування та аналізу коду, ознайомлення з практикою розробки через тестування (TDD).
     
2 ХІД РОБОТИ
1. Ознайомлення з правилами стандартизації коду.
Розглянуто важливість єдиного стилю оформлення програм для команди розробників.
Стандартизація дозволяє покращити читабельність, спростити модифікацію програм та зменшити кількість помилок.
2. Вивчення структури коду в C++.
Розглянуто модульну архітектуру, поділ проєкту на окремі файли (.h і .cpp), використання namespace, а також коментарів-розділювачів для логічного структурування великих файлів.
3. Аналіз принципів форматування коду.
Вивчено правила відступів (4 пробіли), вирівнювання, довжину рядків (до 80–120 символів), а також стилі дужок — Allman та K&R.
Підкреслено важливість єдності стилю у межах проєкту.
4. Розгляд конвенцій іменування.
Проаналізовано практики:
a) camelCase для змінних і функцій;
b) PascalCase для класів;
c) UPPER_CASE для констант;
d) префікс m_ для членів класів.
Обґрунтовано перевагу зрозумілих і описових імен.
5. Вивчення проблеми “магічних чисел”.
Показано різницю між поганим і добрим кодом.
Рекомендовано використовувати іменовані константи для пояснення значень чисел у коді.
6. Робота з коментарями та документацією.
Визначено, що коментарі мають пояснювати логіку (“чому”), а не очевидні дії (“що”).
Описано використання інструмента Doxygen для документування функцій, параметрів і повернених значень.
7. Огляд конвенцій стилю для інших мов.
Розглянуто стандарти PEP 8 (Python), Google Style Guide (C++), Oracle Java Guide, Airbnb JavaScript Guide, наголошено на спільному принципі — читабельності та послідовності.
8. Інструменти перевірки стилю.
Вивчено роботу інструментів ClangFormat, Clang-Tidy, SonarQube, Codacy і Git Hooks, які забезпечують автоматичне форматування, перевірку стилю та аналіз коду в CI/CD pipeline.
9. Ознайомлення з методологією Test-Driven Development.
Розглянуто етапи: Red – Green – Refactor.
Показано, як тестування сприяє написанню надійного та підтримуваного коду.
10. Практичні приклади.
Наведено приклади «поганого» й «хорошого» коду, що демонструють різницю між хаотичним і структурованим програмуванням.

3 ПРИКЛАДИ КОДУ
1. Організація структури проєкту
User.h
 1  #ifndef USER_H
 2  #define USER_H
 3  
 4  #include <string>
 5  
 6  namespace app {   // Простір імен для логічної організації
 7  
 8  //=====================
 9  // Секція: Клас користувача
10  //=====================
11  
12  class User {
13      std::string m_name;
14      int m_age;
15  
16  public:
17      User(const std::string& name, int age);
18      void printInfo() const;
19  };
20  
21  } // namespace app
22  
23  #endif
User.cpp
 1  #include "User.h"
 2  #include <iostream>
 3  
 4  namespace app {
 5  
 6  //=====================
 7  // Реалізація методів класу User
 8  //=====================
 9  
10  User::User(const std::string& name, int age)
11      : m_name(name), m_age(age) {}
12  
13  void User::printInfo() const {
14      std::cout << "Name: " << m_name << ", Age: " << m_age << std::endl;
15  }
16  
17  } // namespace app

2. Принципи форматування коду
K&R стиль
 1  int sum(int a, int b) {
 2      if (a > 0 && b > 0) {
 3          return a + b;
 4      } else {
 5          return 0;
 6      }
 7  }

Allman стиль
 1  int sum(int a, int b)
 2  {
 3      if (a > 0 && b > 0)
 4      {
 5          return a + b;
 6      }
 7      else
 8      {
 9          return 0;
10      }
11  }

Перенесення довгих рядків
 1  int result = calculateComplexFormula(
 2      firstValue, secondValue, adjustmentFactor,
 3      iterationCount, precisionLevel
 4  );

3. Конвенції іменування
 1  class UserProfile {
 2      std::string m_name;
 3      int m_age;
 4  
 5  public:
 6      void setName(const std::string& newName);
 7  };

4. Магічні числа
Поганий приклад
 1  int calc(int x, int y, int z) {
 2      if (x > 100) return y * 1.15 + z * 0.08;
 3      return y + z * 2.5;
 4  }

Хороший приклад
 1  const int PREMIUM_THRESHOLD = 100;
 2  const double TAX_RATE = 1.15;
 3  const double FEE_RATE = 0.08;
 4  
 5  double calculateTotalCost(int baseAmount, int serviceFee, int extra) {
 6      if (baseAmount > PREMIUM_THRESHOLD)
 7          return serviceFee * TAX_RATE + extra * FEE_RATE;
 8      return serviceFee + extra * 2.5;
 9  }

5. Коментарі
 1  // Використовуємо бінарний пошук, оскільки список відсортований
 2  int index = binarySearch(data, value);

 6. Документування коду (Doxygen)
 1  /// Обчислює середнє значення
 2  /// @param values масив чисел
 3  /// @return середнє арифметичне
 4  double calculateAverage(const std::vector<int>& values);

7. Приклад “чистого” коду
 1  // Чистий код - це код, який легко читати, зрозуміти та змінювати
 2  void ProcessUserData(const std::string& name, int age) {
 3      if (age >= 18) {
 4          std::cout << name << " має повний доступ до системи." << std::endl;
 5      } else {
 6          std::cout << name << " має обмежений доступ." << std::endl;
 7      }
 8  }









ВИСНОВКИ
     У ході роботи було:  розглянуто основні принципи якісного оформлення програмного коду на C++, визначено, що дотримання стандартів робить код зрозумілим, легким у підтримці та менш схильним до помилок, встановлено важливість правильного форматування, іменування, коментування та документування, ознайомлено з інструментами автоматизації контролю якості коду, показано, як практика TDD допомагає розробляти надійне програмне забезпечення.
     Отже, чистий, стандартизований і документований код — це не просто гарна практика, а необхідна умова для створення ефективних, масштабованих і довговічних програмних продуктів.
     
     
     
     
     
     
     
     
     
     
     
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
1. Google C++ Style Guide. Google Developers. URL: https://google.github.io/styleguide/cppguide.html (дата звернення: 04.10.2025).
2. Doxygen Manual. Doxygen Documentation. URL: https://www.doxygen.nl/manual/docblocks.html (дата звернення: 04.10.2025).
3. ClangFormat Style Options. LLVM Documentation. URL: https://clang.llvm.org/docs/ClangFormatStyleOptions.html (дата звернення: 04.10.2025).
4. SonarQube Documentation. SonarSource. URL: https://docs.sonarsource.com/sonarqube/latest/ (дата звернення: 04.10.2025).
     
     
     
     
     
     

     
     
     
     
ДОДАТОК А
Відео-посилання на ютуб
https://youtu.be/ntKchIFBN1c














ДОДАТОК Б
Скріншоти презентації

Рисунок Б.1 – Титульний лист

Рисунок Б.2 – Вступна частина

Рисунок Б.3 – Організація структури проєкту


Рисунок Б.4 – Принципи форматування коду

Рисунок Б.5 – Конвенції іменування

Рисунок Б.6 – Магічні числа

Рисунок Б.7 – Коментування коду

Рисунок Б.8 – Професійне документування

Рисунок Б.9 – Специфічні конвенції для популярних мов

Рисунок Б.10 – Інструменти стилізації коду

Рисунок Б.11 – Тестування коду

Рисунок Б.12 – Автоматизація якості коду

Рисунок Б.13 – Приклади коду

Рисунок Б.14 – Висновки
